* Description
  A simple dashboard that visualizes 'Mental Health in the Tech Workplace in 2014' survey results.

* Dependencies
** yarn
  [[https://yarnpkg.com/en/docs/install#mac-stable][installation guide]] 
  
* Components
  Application consists of two pages, user can use links on header to navigate between.
  
** Top Level <App>
   Responsible for fetching survey data and providing it to the pages. That way we don't have to refetch between page transitions.
   
*** Component State
    - Fetch limit (controlled by the dropdown on the navigation bar)
   
** Navigation Bar
   - Provides links to pages documented below.
   - Has a dropdown element to choose amount of entries to display.

** Overview Page
*** Component State
    - Chart Selection
      - property to be displayed
      - property type (normalized or raw)

*** Main Chart
**** X-Axis
     Countries
**** Y-Axis
     - Number of survey entries (raw)
     - Ages (normalized)
     - Gender
     - Family History
     - Seek Treatment

** Details Page
*** Component State
    - Country
    - Number of employees

*** Charts
**** Comparison of Have Benefits vs. No Benefits
     - Discuss with coworkers
     - Discuss with supervisor
**** Tech vs No Tech
     - Care options
**** People who have sought help by age distribution
     - Age group / percentage
**** Correlation of Work interference vs. Sought Help

* Technologies Used
** Next.js
   I have decided to build the application around next.js since it has very little overhead to start with, but provides great flexibility and preformance down the road.
   I had to utilize component state after data fetching to share results between pages on _app.jsx component, which is not ideal for server side rendering. If time would permit, a state management library like redux can be used to share state between pages as well as the server for better performance.
** React-select
   I have used react-select as a the dropdown component since it allows for multi-select and has an intiutive interface. Unfortunately new version has a fresh server side rendering issue which awaits to be resolved ([[https://github.com/JedWatson/react-select/issues/3590][github issue]]).
** Recharts
   I have decided to use recharts since it provides a good abstract over d3.js. d3.js has great tools for data visualization but for this context using an abtraction to solve common problems is a more efficient approach.
** Ramda
   I have decided to utilize ramda for data transformations since it has great affordance for composition and allow for clean functional programming patterns. 

* Time Spent
** Create Readme
   :LOGBOOK:
   CLOCK: [2019-06-04 Tue 20:47]--[2019-06-04 Tue 21:11] =>  0:24
   :END:
** Bootstrap application
   :LOGBOOK:
   CLOCK: [2019-06-04 Tue 21:16]--[2019-06-04 Tue 21:23] =>  0:07
   :END:
** Create mock backend and implement simple API
   :LOGBOOK:
   CLOCK: [2019-06-04 Tue 21:25]--[2019-06-04 Tue 22:18] =>  0:53
   :END:
** Add header component as layout
   :LOGBOOK:
   CLOCK: [2019-06-04 Tue 22:36]--[2019-06-04 Tue 23:48] =>  1:12
   :END:
** Implement overview page chart
   :LOGBOOK:
   CLOCK: [2019-06-05 Wed 00:05]--[2019-06-05 Wed 01:13] =>  1:08
   :END:
** Sanitize and catagorize data
   :LOGBOOK:
   CLOCK: [2019-06-05 Wed 20:06]--[2019-06-05 Wed 20:41] =>  0:35
   :END:
** Allow users to interact with the overview chart
   :LOGBOOK:
   CLOCK: [2019-06-05 Wed 20:59]--[2019-06-05 Wed 22:10] =>  1:11
   :END:
** Refactor distribution extraction
   :LOGBOOK:
   CLOCK: [2019-06-05 Wed 22:21]--[2019-06-05 Wed 22:46] =>  0:25
   :END:


* Resources
** Survey: [[https://www.kaggle.com/osmi/mental-health-in-tech-survey/data][dataset on Kaggle]]
** Convert cvs to json: [[https://csvjson.com/csv2json][cvsjson web app]]
